Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2013.12.24 - 14:11:47]

nestor_app4.asm
Errors: 0

       1   00:0000                      /*****************************
       2   00:0000                    ~   NESTOR - aplicativo demo 4
       3   00:0000                    ~     Revista 86 - Abril/84
       4   00:0000                    ~        Jogo da forca
       5   00:0000                    ~ 
       6   00:0000                    ~         Digitado por
       7   00:0000                    ~       Fábio Belavenuto
       8   00:0000                    ~        em 12/12/2013
       9   00:0000                    ~ 
      10   00:0000                    ~      Compilar com SJASM
      11   00:0000                    ~ *****************************/
      12   00:0000                      
      13   00:0000                      	output	app4.bin
      14   00:0000                      	defpage	0, 2000h, *
      15   00:0000                      	
      16   00:0000  (00)                	page 0
      17   00:2000                      
      18   00:2000                      	include	"../monitor/defs.inc"
       1.  00:2000                      
       2.  00:2000                      /***************************************
       3.  00:2000                    ~ 
       4.  00:2000                    ~        PROGRAMA MONITOR NESTOR
       5.  00:2000                    ~            NOVA ELETRONICA
       6.  00:2000                    ~     SAO PAULO SP 01/84 MSCS/JRP
       7.  00:2000                    ~             Digitado por
       8.  00:2000                    ~           Fábio Belavenuto
       9.  00:2000                    ~             em 27/11/2012
      10.  00:2000                    ~ 
      11.  00:2000                    ~ ***************************************/
      12.  00:2000                      
      13.  00:2000                      /***************************************
      14.  00:2000                    ~ 
      15.  00:2000                    ~  Variáveis, constantes e endereços da
      16.  00:2000                    ~  RAM usados pelo monitor e rotinas do
      17.  00:2000                    ~  K7 Podem ser utilizados em softwares
      18.  00:2000                    ~  utilitários incluindo este arquivo
      19.  00:2000                    ~ 
      20.  00:2000                    ~ ***************************************/
      21.  00:2000                      
      22.  00:2000                      // Portas I/O
      23.  00:2000  (00:0001)           PTEC		= 1
      24.  00:2000  (00:0001)           PSEG		= 1
      25.  00:2000  (00:0002)           PPE			= 2
      26.  00:2000  (00:0003)           PDIG		= 3
      27.  00:2000  (00:0004)           PPS			= 4
      28.  00:2000                      
      29.  00:2000                      // Constantes
      30.  00:2000                      // Códigos das teclas (AJCOL e AJTEC)
      31.  00:2000  (00:0000)           KEY_0		= 0
      32.  00:2000  (00:0001)           KEY_1		= 1
      33.  00:2000  (00:0002)           KEY_2		= 2
      34.  00:2000  (00:0003)           KEY_3		= 3
      35.  00:2000  (00:0004)           KEY_4		= 4
      36.  00:2000  (00:0005)           KEY_5		= 5
      37.  00:2000  (00:0006)           KEY_6		= 6
      38.  00:2000  (00:0007)           KEY_7		= 7
      39.  00:2000  (00:0008)           KEY_8		= 8
      40.  00:2000  (00:0009)           KEY_9		= 9
      41.  00:2000  (00:000A)           KEY_A		= 10
      42.  00:2000  (00:000B)           KEY_B		= 11
      43.  00:2000  (00:000C)           KEY_C		= 12
      44.  00:2000  (00:000D)           KEY_D		= 13
      45.  00:2000  (00:000E)           KEY_E		= 14
      46.  00:2000  (00:000F)           KEY_F		= 15
      47.  00:2000  (00:0010)           KEY_PERM	= 16
      48.  00:2000  (00:0011)           KEY_LOAD	= 17
      49.  00:2000  (00:0012)           KEY_1M		= 18
      50.  00:2000  (00:0013)           KEY_1P		= 19
      51.  00:2000  (00:0014)           KEY_RUN		= 20
      52.  00:2000  (00:0015)           KEY_ER		= 21
      53.  00:2000  (00:0016)           KEY_IV		= 22
      54.  00:2000  (00:0017)           KEY_QUAD	= 23
      55.  00:2000                      
      56.  00:2000                      // Caracteres para display 7-seg
      57.  00:2000  (00:00FF)           DIG_APAG	= 0FFh
      58.  00:2000  (00:00C0)           DIG_0		= 0C0h
      59.  00:2000  (00:00F9)           DIG_1		= 0F9h
      60.  00:2000  (00:00A4)           DIG_2		= 0A4h
      61.  00:2000  (00:00B0)           DIG_3		= 0B0h
      62.  00:2000  (00:0099)           DIG_4		= 99h
      63.  00:2000  (00:0092)           DIG_5		= 92h
      64.  00:2000  (00:0082)           DIG_6		= 82h
      65.  00:2000  (00:00F8)           DIG_7		= 0F8h
      66.  00:2000  (00:0080)           DIG_8		= 80h
      67.  00:2000  (00:0090)           DIG_9		= 90h
      68.  00:2000  (00:0088)           DIG_A		= 88h
      69.  00:2000  (00:0083)           DIG_B		= 83h
      70.  00:2000  (00:00C6)           DIG_C		= 0C6h
      71.  00:2000  (00:00A1)           DIG_D		= 0A1h
      72.  00:2000  (00:0086)           DIG_E		= 86h
      73.  00:2000  (00:008E)           DIG_F		= 8Eh
      74.  00:2000  (00:0082)           DIG_G		= 82h
      75.  00:2000  (00:0089)           DIG_H		= 89h
      76.  00:2000  (00:00F9)           DIG_I		= 0F9h
      77.  00:2000  (00:00E1)           DIG_J		= 0E1h
      78.  00:2000  (00:00C7)           DIG_L		= 0C7h
      79.  00:2000  (00:00C8)           DIG_N		= 0C8h
      80.  00:2000  (00:00C0)           DIG_O		= 0C0h
      81.  00:2000  (00:008C)           DIG_P		= 8Ch
      82.  00:2000  (00:0098)           DIG_Q		= 98h
      83.  00:2000  (00:00CE)           DIG_R		= 0CEh
      84.  00:2000  (00:0092)           DIG_S		= 92h
      85.  00:2000  (00:0087)           DIG_T		= 87h
      86.  00:2000  (00:00C1)           DIG_U		= 0C1h
      87.  00:2000  (00:007F)           DIG_PONTO	= 7Fh
      88.  00:2000  (00:00B7)           DIG_IGUAL	= 0B7h
      19   00:2000                      	include	"../monitor/nestor.inc"
       1.  00:2000                      
       2.  00:2000                      /***************************************
       3.  00:2000                    ~ 
       4.  00:2000                    ~        PROGRAMA MONITOR NESTOR
       5.  00:2000                    ~            NOVA ELETRONICA
       6.  00:2000                    ~     SAO PAULO S.P. 01/84 MSCS/JRP
       7.  00:2000                    ~             Digitado por
       8.  00:2000                    ~           Fábio Belavenuto
       9.  00:2000                    ~             em 27/11/2012
      10.  00:2000                    ~ 
      11.  00:2000                    ~ ***************************************/
      12.  00:2000                      
      13.  00:2000                      /***************************************
      14.  00:2000                    ~ 
      15.  00:2000                    ~  Endereços do monitor para serem usados
      16.  00:2000                    ~  em softwares utilitários incluindo
      17.  00:2000                    ~  este arquivo
      18.  00:2000                    ~ 
      19.  00:2000                    ~ ***************************************/
      20.  00:2000                      
      21.  00:2000  (00:0000)           RESET		= 0000h
      22.  00:2000  (00:0096)           VARR		= 0096h
      23.  00:2000  (00:00A2)           REST		= 00A2h
      24.  00:2000  (00:00AF)           TEMPO		= 00AFh
      25.  00:2000  (00:00C3)           AJCOL		= 00C3h
      26.  00:2000  (00:00DE)           AJTEC		= 00DEh
      27.  00:2000  (00:0176)           DISPLAY		= 0176h
      28.  00:2000  (00:018E)           FORMAT		= 018Eh
      20   00:2000                      
      21   00:2000  (00:0020)           DELAYROL	= 32
      22   00:2000  (00:0060)           DELAY		= 96
      23   00:2000                      
      24   00:2000                      	code @ 2000h
      25   00:2000                      
      26   00:2000                      inicio:
      27   00:2000  01 00 22            	ld		bc, titulo					// BC aponta para mensagem de titulo
      28   00:2003                      a4:
      29   00:2003  16 20               	ld		d, DELAYROL					// D contem um contador de atraso para rolagem do titulo
      30   00:2005  03                  	inc		bc							// incrementa BC
      31   00:2006  79                  	ld		a, c						// testa C
      32   00:2007  FE 16               	cp		LOW (titulo+22)				// se for fim da mensagem
      33   00:2009  CA 00 20            	jp z, 	inicio						// recomeca tudo
      34   00:200C                      a3:
      35   00:200C  1E 06               	ld		e, 6						// E recebe 6 (contador do digito)
      36   00:200E  3E 01               	ld		a, 1						// A recebe 1 (bit 0)
      37   00:2010  60                  	ld		h, b						// copia para HL o conteudo de BC (apontador da mensagem de titulo)
      38   00:2011  69                  	ld		l, c						//
      39   00:2012                      a2:
      40   00:2012  CD AF 00            	call	TEMPO						// chama TEMPO (coloca caracter apontado por HL no display do bit em A
      41   00:2015  08                  	ex		af							// salva A
      42   00:2016  DB 01               	in		a, (PTEC)					// testa se tem tecla apertada
      43   00:2018  FE 00               	cp		0							// compara com 0
      44   00:201A  C2 2A 20            	jp nz,	a1							// se não for 0, teve tecla apertada, pula
      45   00:201D  08                  	ex		af							// restaura A
      46   00:201E  87                  	add		a, a						// desloca A para apontar para o proximo bit (proximo display)
      47   00:201F  1D                  	dec		e							// decrementa E
      48   00:2020  C2 12 20            	jp nz,	a2							// se nao for 0 ainda tem display para atualizar, voltamos em A2
      49   00:2023  15                  	dec		d							// acabou a atualizacao de todos os digitos do display, decrementamos D (delay)
      50   00:2024  C2 0C 20            	jp nz,	a3							// se D nao for 0, voltamos a atualizar o display
      51   00:2027  C3 03 20            	jp 		a4							// D chegou a 0, acabou a espera, vamos em A4 para incrementar BC e deslocar a mensagem do titulo
      52   00:202A                      a1:
      53   00:202A  08                  	ex		af							// acabamos de mostrar o titulo, salvamos A (A contem a tecla pressionada)
      54   00:202B  21 38 22            	ld		hl, mencon1					// vamos por 0 em MENCON1
      55   00:202E  36 00               	ld		(hl), 0
      56   00:2030  21 45 22            	ld		hl, mencon2					// vamos por 0 em MEMCON2
      57   00:2033  36 00               	ld		(hl), 0
      58   00:2035  21 48 22            	ld		hl, ndv						// vamos por 0 em NDV
      59   00:2038  36 00               	ld		(hl), 0
      60   00:203A  D9                  	exx									// troca registradores
      61   00:203B  21 3F 22            	ld		hl, buf						// HL' aponta para buffer da palavra digitada pelo usuario
      62   00:203E  D9                  	exx									// troca regs
      63   00:203F  21 39 22            	ld		hl, buft					// HL aponta para buffer das letras acertadas
      64   00:2042                      a5:
      65   00:2042  36 FF               	ld		(hl), 0FFh					// vamos preencher BUF e BUFT com 0xFF 
      66   00:2044  23                  	inc		hl							// (são 12 bytes, entao preenchemos tambem de 0xFF a variavel BUF)
      67   00:2045  7D                  	ld		a, l
      68   00:2046  FE 45               	cp		LOW (buft+12)
      69   00:2048  C2 42 20            	jp nz,	a5
      70   00:204B                      a6:
      71   00:204B  21 3F 22            	ld		hl, buf						// aqui HL aponta para buffer da palavra escolhida pelo usuario
      72   00:204E  CD FA 20            	call	RIP							// chama RIP que coloca no display o conteudo apontado por HL (6 bytes) e testa teclado
      73   00:2051  78                  	ld		a, b						// A recebe conteudo de B
      74   00:2052  FE 00               	cp		0							// se B (no caso A) for 0, nao teve tecla pressionada
      75   00:2054  CA 4B 20            	jp z,	a6							// entao voltamos no loop que fica exibindo o conteudo de BUF
      76   00:2057                      a7:
      77   00:2057  21 3F 22            	ld		hl, buf						// chegamos aqui quando pressionamos uma tecla
      78   00:205A  CD A2 00            	call	REST						// exibe no display os 6 bytes apontados por HL sem testar teclado
      79   00:205D  7A                  	ld		a, d						// colocamos em A o conteudo de D, que deve apontar para o bit da coluna do teclado da ultima tecla pressionada
      80   00:205E  D3 03               	out		(PDIG), a					// seta coluna do teclado
      81   00:2060  DB 01               	in		a, (PTEC)					// le teclado
      82   00:2062  FE 00               	cp		0							// se ainda estiver sendo pressionada
      83   00:2064  C2 57 20            	jp nz,	a7							// volta a atualizar o display e espera até tecla deixar de ser pressionada
      84   00:2067  CD C3 00            	call	AJCOL						// tecla deixou de ser pressionada, vamos converter para um numero de 0 a 23
      85   00:206A  CD DE 00            	call	AJTEC
      86   00:206D  21 45 22            	ld		hl, mencon2					// Vamos verificar o valor de mencon2
      87   00:2070  7E                  	ld		a, (hl)						//
      88   00:2071  CB 47               	bit		0, a						// testamos bit 0 de A, se for 0 (digito impar) nao fazemos nada
      89   00:2073  C2 EC 20            	jp nz,	a133						// pulamos para A133 se o bit 0 de mencon2 for 1 (digito par) para converter 2 digitos em valor hexa e salvar em HL' (BUF)
      90   00:2076  21 46 22            	ld		hl, met						// salvamos o conteudo de B em MET
      91   00:2079  70                  	ld		(hl), b						//
      92   00:207A                      a14:
      93   00:207A  21 45 22            	ld		hl, mencon2					// incrementamos o conteudo de mencon2 (indicar que eh digito impar ou par)
      94   00:207D  34                  	inc		(hl)
      95   00:207E  7E                  	ld		a, (hl)						// lemos o valor de mencon2, se for 12 eh porque esta completo (maximo de 6 letras)
      96   00:207F  FE 0C               	cp		12							//
      97   00:2081  C2 4B 20            	jp nz,	a6							// se nao preencheu as 6 letras, retornamos para a6
      98   00:2084  11 60 00            	ld		de, DELAY					// carregamos um atraso em DE
      99   00:2087                      a8:
     100   00:2087  21 3F 22            	ld		hl, buf						// vamos exibir o conteudo de BUF
     101   00:208A  CD A2 00            	call	REST
     102   00:208D  1B                  	dec		de							// e esperamos o tempo do delay atualizando o display
     103   00:208E  7A                  	ld		a, d						// jogamos D para A
     104   00:208F  B3                  	or		e							// para fazer um OR entre D e E para ver se chegou a 0
     105   00:2090  C2 87 20            	jp nz,	a8							// se nao acabou o tempo do delay, voltamos para o loop em A8
     106   00:2093  00                  	nop
     107   00:2094                      a9:
     108   00:2094  21 39 22            	ld		hl, buft					// agora vamos exibir o conteudo de BUFT no display
     109   00:2097  CD FA 20            	call	RIP							// e testar se tem tecla pressionada
     110   00:209A  78                  	ld		a, b						// tem tecla pressionada?
     111   00:209B  FE 00               	cp		0							//
     112   00:209D  CA 94 20            	jp z,	a9							// se nao, voltamos em A9 e continuamos a atualizar o display ate apertar uma tecla
     113   00:20A0                      a10:
     114   00:20A0  21 39 22            	ld		hl, buft					// era 214A
     115   00:20A3  CD A2 00            	call	REST						// atualiza display com conteudo de BUFT e testa teclado
     116   00:20A6  7A                  	ld		a, d
     117   00:20A7  D3 03               	out		(PDIG), a
     118   00:20A9  DB 01               	in		a, (PTEC)
     119   00:20AB  FE 00               	cp		0
     120   00:20AD  C2 A0 20            	jp nz,	a10							// se nao pressionou nenhuma tecla volta a atualizar display
     121   00:20B0  CD C3 00            	call	AJCOL						// convertemos a tecla pressionada em indice em B de 0 a 23
     122   00:20B3  CD DE 00            	call	AJTEC
     123   00:20B6  21 38 22            	ld		hl, mencon1					// testamos se eh digito impar ou par
     124   00:20B9  CB 46               	bit		0, (hl)
     125   00:20BB  C2 C6 20            	jp nz,	a11							// se for par (2 digitos pressionados) pulamos para A11
     126   00:20BE  34                  	inc		(hl)						// incrementar contador de teclas
     127   00:20BF  21 46 22            	ld		hl, met
     128   00:20C2  70                  	ld		(hl), b						// salvamos tecla pressionada em MET
     129   00:20C3  C3 94 20            	jp		a9							// esperamos proxima tecla
     130   00:20C6                      a11:
     131   00:20C6  34                  	inc		(hl)						// incrementa contador de teclas
     132   00:20C7  78                  	ld		a, b						// vamos rotacionar as teclas para gerar o valor hexa em A
     133   00:20C8  21 46 22            	ld		hl, met						//
     134   00:20CB  ED 6F               	rld									//
     135   00:20CD  7E                  	ld		a, (hl)						// A contem valor hexa digitado
     136   00:20CE  1E 00               	ld		e, 0						// E marca se acertou
     137   00:20D0  21 3F 22            	ld		hl, buf						// HL aponta para buffer da palavra escolhida pelo usuario
     138   00:20D3                      a13:
     139   00:20D3  BE                  	cp		(hl)						// testa se bate letra escolhida com alguma da palavra do usuario
     140   00:20D4  CA 0C 21            	jp z,	acertou						// bateu, entao vamos marcar a letra como certa
     141   00:20D7  23                  	inc		hl							// incrementa
     142   00:20D8                      a16:
     143   00:20D8  4F                  	ld		c, a						// salvamos a letra digitada
     144   00:20D9  7D                  	ld		a, l
     145   00:20DA  FE 45               	cp		LOW (buf + 6)				// testamos as 6 letras?
     146   00:20DC  CA E3 20            	jp z,	a12							// sim, pulamos para A12
     147   00:20DF  79                  	ld		a, c						// voltamos a letra digitada para testar por outras posicoes
     148   00:20E0  C3 D3 20            	jp		a13							// testar o resto
     149   00:20E3                      a12:
     150   00:20E3  7B                  	ld		a, e						// acertamos a letra?
     151   00:20E4  FE 00               	cp		0
     152   00:20E6  CA 1B 21            	jp z,	errou						// nao acertamos, vamos mostrar que errou e incrementar a quantidade de erros
     153   00:20E9  C3 94 20            	jp		a9							// volta ao comeco
     154   00:20EC                      
     155   00:20EC                      a133:
     156   00:20EC  21 46 22            	ld		hl, met						// temos 2 valores hexa digitados, vamos converter para ASCII
     157   00:20EF  78                  	ld		a, b						// MET tem o primeiro, B tem o segundo
     158   00:20F0  ED 6F               	rld									// rotaciona 4 bits dos 12 bits de A(low) e conteudo de HL, assim juntamos os 2 valores hexa digitados em A
     159   00:20F2  7E                  	ld		a, (hl)						// trazemos para A o resultado de (HL)
     160   00:20F3  D9                  	exx									// salvamos os registradores (menos AF)
     161   00:20F4  77                  	ld		(hl), a						// colocamos A em HL' (que aponta para BUF)
     162   00:20F5  23                  	inc		hl							// incrementamos HL'
     163   00:20F6  D9                  	exx									// voltamos os registradores
     164   00:20F7  C3 7A 20            	jp		a14							// agora voltamos para A14
     165   00:20FA                      
     166   00:20FA                      RIP:
     167   00:20FA  06 00               	ld		b, 0						// B contera um valor diferente de zero se pressionarmos alguma tecla
     168   00:20FC  16 00               	ld		d, 0						// D contera o bit da coluna do teclado se pressionarmos alguma tecla
     169   00:20FE  1E 06               	ld		e, 6						// E conta 6 digitos para exibir
     170   00:2100  3E 01               	ld		a, 1						// comecamos no display 1
     171   00:2102                      a15:
     172   00:2102  CD 96 00            	call	VARR						// atualizamos display e testamos por teclas pressionadas
     173   00:2105  79                  	ld		a, c						// pegamos A salvo em C
     174   00:2106  87                  	add		a, a						// rotacionamos A para acionar proximo display
     175   00:2107  1D                  	dec		e							// decrementa contados de display
     176   00:2108  C2 02 21            	jp nz,	a15							// ainda nao exibimos todo os 6 caracteres, voltamos ao loop
     177   00:210B  C9                  	ret									// atualizamos o display, retornar a rotina chamadora
     178   00:210C                      
     179   00:210C                      acertou:
     180   00:210C  4F                  	ld		c, a						// acertamos uma letra, vamos salvar esta em C
     181   00:210D  7D                  	ld		a, l						// salvamos L em A
     182   00:210E  E5                  	push	hl							// salvar HL
     183   00:210F  D6 06               	sub		6							// subtraimos 6 para apontar para a mesma posicao do caracter no buffer de letras acertadas
     184   00:2111  6F                  	ld		l, a						// corrige L para HL apontar para HL anterior - 6
     185   00:2112  71                  	ld		(hl), c						// salvamos letra em C no buffer de acertos
     186   00:2113  E1                  	pop		hl							// restauramos HL
     187   00:2114  23                  	inc		hl							// incrementamos HL para testar proximo caracter
     188   00:2115  79                  	ld		a, c						// voltamos caracter salvo
     189   00:2116  1E 01               	ld		e, 1						// marcamos que tivemos acerto
     190   00:2118  C3 D8 20            	jp		a16							// volta em A16
     191   00:211B                      
     192   00:211B                      errou:
     193   00:211B  21 48 22            	ld		hl, ndv						// carrega numero de erros
     194   00:211E  34                  	inc		(hl)						// incrementa
     195   00:211F  7E                  	ld		a, (hl)						// transfere n. erros para A
     196   00:2120  21 30 22            	ld		hl, tfe						// ponteiro na RAM contendo os digitos de 1 a 7
     197   00:2123  85                  	add		a, l						// converte numero de erro em digito
     198   00:2124  6F                  	ld		l, a
     199   00:2125  7E                  	ld		a, (hl)						// A contem o digito de 1 a 7 conforme valor de NDV
     200   00:2126  21 49 22            	ld		hl, bufe					// buffer na RAM para exibir "ERRO x" onde 'x' é a quantidade de erros
     201   00:2129  36 86               	ld		(hl), DIG_E
     202   00:212B  23                  	inc		hl
     203   00:212C  36 CE               	ld		(hl), DIG_R
     204   00:212E  23                  	inc		hl
     205   00:212F  36 CE               	ld		(hl), DIG_R
     206   00:2131  23                  	inc		hl
     207   00:2132  36 C0               	ld		(hl), DIG_O
     208   00:2134  23                  	inc		hl
     209   00:2135  36 FF               	ld		(hl), DIG_APAG
     210   00:2137  23                  	inc		hl
     211   00:2138  77                  	ld		(hl), a
     212   00:2139  11 60 00            	ld		de, DELAY					// atraso para exibir mensagem por um tempo
     213   00:213C                      a166:
     214   00:213C  21 49 22            	ld		hl, bufe					// exibir mensagem de erro
     215   00:213F  CD A2 00            	call	REST
     216   00:2142  1B                  	dec		de
     217   00:2143  7A                  	ld		a, d
     218   00:2144  B3                  	or		e
     219   00:2145  C2 3C 21            	jp nz,	a166						// ainda nao acabou tempo de delay, voltar a exibir mensagem
     220   00:2148  21 48 22            	ld		hl, ndv						// carrega numero de erros
     221   00:214B  7E                  	ld		a, (hl)
     222   00:214C  FE 07               	cp		7							// chegou a 7?
     223   00:214E  CA 54 21            	jp z,	perdeu						// se sim, exibir mensagem de fim de jogo
     224   00:2151  C3 94 20            	jp		a9							// ainda ha tentativas, voltar
     225   00:2154                      	
     226   00:2154                      perdeu:
     227   00:2154  01 1B 22            	ld		bc, mens_gameover
     228   00:2157                      a18:
     229   00:2157  16 20               	ld		d, DELAYROL					// atraso de rolagem de mensagem
     230   00:2159  03                  	inc		bc
     231   00:215A  79                  	ld		a, c
     232   00:215B  FE 2B               	cp		LOW (mens_gameover + 16)
     233   00:215D  CA 54 21            	jp z,	perdeu
     234   00:2160                      a17:
     235   00:2160  60                  	ld		h, b
     236   00:2161  69                  	ld		l, c
     237   00:2162  C5                  	push	bc
     238   00:2163  CD A2 00            	call	REST
     239   00:2166  C1                  	pop		bc
     240   00:2167  15                  	dec		d
     241   00:2168  C2 60 21            	jp nz,	a17
     242   00:216B  C3 57 21            	jp		a18							// exibe mensagem sem parar
     243   00:216E                      
     244   00:216E                      	// Variaveis e constantes
     245   00:216E                      	code @ 2200h
     246   00:2200                      
     247   00:2200                      titulo:
     248   00:2200  FF FF FF FF FF FF   	db		DIG_APAG, DIG_APAG, DIG_APAG, DIG_APAG, DIG_APAG, DIG_APAG
     249   00:2206  E1 C0 82 C0         	db		DIG_J, DIG_O, DIG_G, DIG_O
     250   00:220A  FF FF               	db		DIG_APAG, DIG_APAG
     251   00:220C  A1 88               	db		DIG_D, DIG_A
     252   00:220E  FF FF               	db		DIG_APAG, DIG_APAG
     253   00:2210  8E C0 CE C6 88      	db		DIG_F, DIG_O, DIG_R, DIG_C, DIG_A
     254   00:2215  FF FF FF FF FF FF   	db		DIG_APAG, DIG_APAG, DIG_APAG, DIG_APAG, DIG_APAG, DIG_APAG
     255   00:221B                      
     256   00:221B                      mens_gameover:
     257   00:221B  FF FF FF FF FF FF   	db		DIG_APAG, DIG_APAG, DIG_APAG, DIG_APAG, DIG_APAG, DIG_APAG
     258   00:2221  C7 86               	db		DIG_L, DIG_E
     259   00:2223  FF FF               	db		DIG_APAG, DIG_APAG
     260   00:2225  A1 88 C8 C6 86      	db		DIG_D, DIG_A, DIG_N, DIG_C, DIG_E
     261   00:222A  FF FF FF FF FF FF   	db		DIG_APAG, DIG_APAG, DIG_APAG, DIG_APAG, DIG_APAG, DIG_APAG
     262   00:2230                      
     263   00:2230                      tfe:
     264   00:2230  00                  	db		0
     265   00:2231                      	db		DIG_1, DIG_2, DIG_3, DIG_4, DIG_5, DIG_6, DIG_7
     265   00:2231  F9 A4 B0 99 92 82 F8 
     266   00:2238                      
     267   00:2238                      mencon1:
     268   00:2238  00 (1)              	ds		1							// 
     269   00:2239                      buft:
     270   00:2239  00 (6)              	ds		6							// buffer com as letras acertadas pelo usuario na posicao correta
     271   00:223F                      buf:
     272   00:223F  00 (6)              	ds		6							// buffer com a palavra escolhida pelo usuario
     273   00:2245                      mencon2:
     274   00:2245  00 (1)              	ds		1							// 
     275   00:2246                      met:
     276   00:2246  00 (2)              	ds		2							// 
     277   00:2248                      ndv:
     278   00:2248  00 (1)              	ds		1							// numero de erros
     279   00:2249                      bufe:
     280   00:2249  00 (6)              	ds		6							// buffer para exibir mensagem de erro

    LABELS
-------------------------------------------------
00:00000001   PTEC
00:00000001 X PSEG
00:00000002 X PPE
00:00000003   PDIG
00:00000004 X PPS
00:00000000 X KEY_0
00:00000001 X KEY_1
00:00000002 X KEY_2
00:00000003 X KEY_3
00:00000004 X KEY_4
00:00000005 X KEY_5
00:00000006 X KEY_6
00:00000007 X KEY_7
00:00000008 X KEY_8
00:00000009 X KEY_9
00:0000000A X KEY_A
00:0000000B X KEY_B
00:0000000C X KEY_C
00:0000000D X KEY_D
00:0000000E X KEY_E
00:0000000F X KEY_F
00:00000010 X KEY_PERM
00:00000011 X KEY_LOAD
00:00000012 X KEY_1M
00:00000013 X KEY_1P
00:00000014 X KEY_RUN
00:00000015 X KEY_ER
00:00000016 X KEY_IV
00:00000017 X KEY_QUAD
00:000000FF   DIG_APAG
00:000000C0 X DIG_0
00:000000F9   DIG_1
00:000000A4   DIG_2
00:000000B0   DIG_3
00:00000099   DIG_4
00:00000092   DIG_5
00:00000082   DIG_6
00:000000F8   DIG_7
00:00000080 X DIG_8
00:00000090 X DIG_9
00:00000088   DIG_A
00:00000083 X DIG_B
00:000000C6   DIG_C
00:000000A1   DIG_D
00:00000086   DIG_E
00:0000008E   DIG_F
00:00000082   DIG_G
00:00000089 X DIG_H
00:000000F9 X DIG_I
00:000000E1   DIG_J
00:000000C7   DIG_L
00:000000C8   DIG_N
00:000000C0   DIG_O
00:0000008C X DIG_P
00:00000098 X DIG_Q
00:000000CE   DIG_R
00:00000092 X DIG_S
00:00000087 X DIG_T
00:000000C1 X DIG_U
00:0000007F X DIG_PONTO
00:000000B7 X DIG_IGUAL
00:00000000 X RESET
00:00000096   VARR
00:000000A2   REST
00:000000AF   TEMPO
00:000000C3   AJCOL
00:000000DE   AJTEC
00:00000176 X DISPLAY
00:0000018E X FORMAT
00:00000020   DELAYROL
00:00000060   DELAY
00:00002000   inicio
00:00002003   a4
00:0000200C   a3
00:00002012   a2
00:0000202A   a1
00:00002042   a5
00:0000204B   a6
00:00002057   a7
00:0000207A   a14
00:00002087   a8
00:00002094   a9
00:000020A0   a10
00:000020C6   a11
00:000020D3   a13
00:000020D8   a16
00:000020E3   a12
00:000020EC   a133
00:000020FA   RIP
00:00002102   a15
00:0000210C   acertou
00:0000211B   errou
00:0000213C   a166
00:00002154   perdeu
00:00002157   a18
00:00002160   a17
00:00002200   titulo
00:0000221B   mens_gameover
00:00002230   tfe
00:00002238   mencon1
00:00002239   buft
00:0000223F   buf
00:00002245   mencon2
00:00002246   met
00:00002248   ndv
00:00002249   bufe


 Output: nestor_app4.out
-------------------------------------------------

 Page: 00
  Org: 00000000  Size: *  Used: 00000000

    No output

 Output: app4.bin
-------------------------------------------------

 Page: 00
  Org: 00002000  Size: *  Used: 0000024F

   Address   Length Align   Label
   00002000     366     @   inicio
   0000216E     146       <empty>
   00002200      79     @   titulo
